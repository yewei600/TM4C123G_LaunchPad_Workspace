#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_i2c.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/i2c.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"


//initialize I2C module 0
//Slightly modified version of TI's example code
void InitSlaveI2C1(void)
{
	//enable I2C module 0
	SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);

	//reset module
	SysCtlPeripheralReset(SYSCTL_PERIPH_I2C1);

	//enable GPIO peripheral that contains I2C 0
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

	// Configure the pin muxing for I2C0 functions on port B2 and B3.
	GPIOPinConfigure(GPIO_PA6_I2C1SCL);
	GPIOPinConfigure(GPIO_PA7_I2C1SDA);

	// Select the I2C function for these pins.
	GPIOPinTypeI2CSCL(GPIO_PORTA_BASE, GPIO_PIN_6);
	GPIOPinTypeI2C(GPIO_PORTA_BASE, GPIO_PIN_7);

	// Enable and initialize the I2C0 master module.  Use the system clock for
	// the I2C0 module.  The last parameter sets the I2C data transfer rate.
	// If false the data rate is set to 100kbps and if true the data rate will
	// be set to 400kbps.
	// I2CMasterInitExpClk(I2C0_BASE, SysCtlClockGet(), false);

	I2CSlaveInit(I2C1_BASE,0x01);

	//clear I2C FIFOs
	HWREG(I2C1_BASE + I2C_O_FIFOCTL) = 80008000;
}

//sends an array of data via I2C to the specified slave
void I2CSendString(char array[])
{
	//initialize index into array
	uint8_t i = 1;

	//put data to be sent into FIFO
	while(array[i+1] != '\0'){
		I2CSlaveDataPut(I2C1_BASE,array[i++]);
	}

	I2CSlaveDataPut(I2C1_BASE,array[i]);

}

// have the Arduino send some binarys,   and display it using external LEDs

int main(void) {

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);

	InitSlaveI2C1();

	char string[8]="Hello!\n";

	while(1){
		I2CSendString(string);
		SysCtlDelay(1000000);

	}

	return 0;
}
